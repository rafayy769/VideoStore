/**
 * @file videoStore.h
 * @author Abdul Rafay (24100173@lums.edu.pk)
 * @brief 
 * @version 0.1
 * @date 2022-01-08
 * 
 * @copyright Copyright (c) 2022
 * 
 */

#pragma once

#include "customerList.h"

/**
 * @struct Revenue
 * @brief Holds the revenue generated on a particular day/Time. The timestamps are represented by the Time object and the amount generated is stored as well. Also represents a node in the linked list that holds Revenue objects.
 */
struct Revenue
{
    /**
     * @brief Construct a new empty Revenue object
     * 
     */
    Revenue() : date(0), amount(0), next(NULL) {}

    /**
     * @brief Parameterized constructor for Revenue object.
     * 
     * @param tdate Time object to hold the timestamp.
     * @param amnt Amount generated at that time.
     */
    Revenue(Time tdate, int amnt) : date(tdate), amount(amnt), next(NULL) {}

    Time date;
    int amount;
    Revenue* next;  /**< Points to the next Revenue object in the linked list. The linked list will be implemented and used inside videoStore. */
};

/**
 * @class videoStore
 * @brief Main class that represents our video store. Holds the methods to implement the core functionality of the store. 
 */
class videoStore
{
    Revenue* revHead;       /**< Holds the head of the list that holds revenue generated. */
    Revenue* revTail;       /**< Holds the tail, or the last element of the list that holds revenue generated. */
    videoList moviesList;   /**< Holds the list of the movies available at the store. */
    customerList customers; /**< Holds the list of the customers that have/intending to shop at the store. */
    Time currentTime;       /**< Holds the global current time at the store in the simulation. */
public:

    /**
     * @brief Construct a new empty videoStore object.
     * 
     */
    videoStore();

    /**
     * @brief Returns the list of the customers.
     * 
     * @return customerList& 
     */
    customerList& getCustList();

    /**
     * @brief Returns the list of the movies at the store.
     * 
     * @return videoList& 
     */
    videoList& getVidList();

    /**
     * @brief Returns the current time at the store.
     * 
     * @return Time 
     */
    Time getCurrentTime();

    /**
     * @brief Adds a Revenue node to the list of the revenues.
     * 
     * @param node A revenue node to add to the list.
     */
    void addRevenue(Revenue* node);

    /**
     * @brief Updates the time at a particular rate to create a simulation. Used later in the main loop to keep updating the time with every iteration of the loop.
     * 
     */
    void updateTime();

    /**
     * @brief Adds a new movie to the store. Takes in input from user, checks if the database already have the movie to maintain a unique database with no repetitions. Adds a movie if it doesn't exist before.
     * 
     */
    void addMovie();

    /**
     * @brief Adds a new customer to the store database of customers. A new CustomerInfo object is added to the list of customers held by videoStore. Each customer is assigned a new randomly generated but unique ID.
     * 
     */
    void addCustomers();

    /**
     * @brief Shows the details of a particular movie, searches via the title of the movie.
     * 
     * @param title title of movie to display the details.
     */
    void showDetails(string title);

    /**
     * @brief Checks whether a particular movie, searched via the title is available at the store or not. The database is searched for the movie, and if not found, returns false. If the movie is available at the store, but all the copies are rented out, displays the details of all checked out copies and returns false, otherwise returns true.
     * 
     * @param inptitle Title of the movie to look for.
     * @return bool
     */
    bool checkAvailability(string inptitle);

    /**
     * @brief Rents a particular movie to a particular customer. Checks if a movie is available for renting out by searching the database, if it is, checks if the user's account is overdue, if it isn't rents the user the movie, via their ID. Updates all the relevant information in the database as well such as checked in and out times, and who and when rented it and the revenue generated by it.
     * 
     * @param id ID of the user who wants to rent the movie.
     * @param title Title of the movie being requested.
     */
    void rentToCustomer(int id, string title);

    /**
     * @brief Checks in the movie that the user returns, ID and title of movie are checked in database, and when the movie is returned, fine is calculated if any and the availablecopies of the movie is updated. Other relevant variables are also updated.
     * 
     * @param id ID of the user who wants to return the movie.
     * @param title title of the movie being returned.
     */
    void returnMovie(int id, string title);
    
    /**
     * @brief Get the Total outstanding amount by the current time. Goes through the list of all the movies at the store, then for each movie searches if any of its copy is overdue, if it is, calculates the fine for that and adds that to total amount. Returns the amount then.
     * 
     * @return int 
     */
    int getOutStandingAmount();

    /**
     * @brief Calculate and print the total revenue generated within a given time frame given by user. Core functionality of the videoStore.
     * 
     */
    void getRevenueGenerated();

    /**
     * @brief Deletes a movie casette from the store. Removes a movie completely from the store's movie list if there is no copy anymore in the store.
     * 
     * @param title Title of movie to delete the casette of.
     */
    void deleteCasette(string title);
};